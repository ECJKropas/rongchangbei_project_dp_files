name: Auto Release DP Files

permissions:
  contents: write  

on:
  push:
    paths:
      - 'dp_files/**'
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true  # 允许后续推送

      - name: Setup environment
        id: setup
        run: |
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          CURRENT_DATETIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "RELEASE_TAG=v$TIMESTAMP" >> $GITHUB_ENV
          echo "CURRENT_DATETIME=$CURRENT_DATETIME" >> $GITHUB_ENV
          echo "Using release tag: $RELEASE_TAG"

      - name: Generate manifest
        run: |
          mkdir -p release_assets
          
          # 创建正确的 JSON 结构
          echo '{ "last_updated": "'${{ env.CURRENT_DATETIME }}'", "resources": [' > manifest.json
          
          find dp_files -name "*.dp" -print0 | while IFS= read -r -d '' file; do
            # 计算 SHA256
            sha=$(sha256sum "$file" | awk '{print $1}')
            
            # 获取文件名和路径
            filename=$(basename "$file")
            rel_path="${file#dp_files/}"
            
            # 生成资源 ID（基于文件路径）
            resource_id="${rel_path%.dp}"
            resource_id="${resource_id//\//_}"  # 将斜杠替换为下划线
            
            # 提取description字段
            description=$(jq -r '.description' "$file" 2>/dev/null || echo "")
            if [ -z "$description" ] || [ "$description" = "null" ]; then
              description="No description available"
            fi
            
            # 提取package_name字段
            package_name=$(jq -r '.package_name' "$file" 2>/dev/null || echo "")
            if [ -z "$package_name" ] || [ "$package_name" = "null" ]; then
              package_name="Default Package"
            fi

            # 提取subject_matter字段
            subject_matter=$(jq -r '.subject_matter' "$file" 2>/dev/null || echo "")
            if [ -z "$subject_matter" ] || [ "$subject_matter" = "null" ]; then
              subject_matter="Default Package"
            fi
            
            # 转义字符串中的特殊字符
            description_escaped=$(echo "$description" | sed 's/"/\\"/g')
            package_name_escaped=$(echo "$package_name" | sed 's/"/\\"/g')
            subject_matter_escaped=$(echo "$subject_matter" | sed 's/"/\\"/g')
            
            # 添加到 manifest
            echo "{
              \"id\": \"$resource_id\",
              \"file\": \"$filename\",
              \"path\": \"$rel_path\",
              \"package_name\": \"$package_name_escaped\",
              \"description\": \"$description_escaped\",
              \"subject_matter\": \"$subject_matter_escaped\",
              \"url\": \"https://github.com/${{ github.repository }}/releases/download/${{ env.RELEASE_TAG }}/$filename\",
              \"sha256\": \"$sha\"
            }," >> manifest.json
            
            # 复制到发布目录
            cp "$file" "release_assets/"
          done
          
          # 完成 JSON 格式
          if [ -s manifest.json ]; then
            sed -i '$ s/,$//' manifest.json
          fi
          echo ']}' >> manifest.json
          
          # 验证manifest.json格式
          if ! jq empty manifest.json 2>/dev/null; then
            echo "Error: Invalid JSON in manifest.json"
            cat manifest.json
            exit 1
          fi
          
          # 添加 manifest 到发布资产
          cp manifest.json release_assets/

      - name: Commit to repository
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@users.noreply.github.com"
          git add manifest.json
          git commit -m "Update manifest for release ${{ env.RELEASE_TAG }} [skip ci]"
          git push origin main

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "DP Resources Release ${{ env.RELEASE_TAG }}"
          body: "Automated release of .dp resource files"
          files: release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
